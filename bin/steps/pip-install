#!/usr/bin/env bash

# shellcheck source=bin/utils
source $BIN_DIR/utils

if [ ! "$SKIP_PIP_INSTALL" ]; then

    # Install dependencies with Pip.
    puts-step "Installing requirements with pip"

    set +e
    
    # Measure that we're using pip.
    mcount "tool.pip"

    puts-step "     from $DJANGO_PROJ/requirements.txt"
    /app/.heroku/python/bin/pip install -r "$DJANGO_PROJ/requirements.txt" --exists-action=w --src=/app/.heroku/src --disable-pip-version-check --no-cache-dir 2>&1 | tee "$WARNINGS_LOG" | cleanup | indent
    for dependency in "${DEPENDENCIES[@]}"
    do
        puts-step "     from $dependency/requirements.txt"
        /app/.heroku/python/bin/pip install -r "$dependency/requirements.txt" --exists-action=w --src=/app/.heroku/src --disable-pip-version-check --no-cache-dir 2>&1 | tee "$WARNINGS_LOG" | cleanup | indent
    done

    PIP_STATUS="${PIPESTATUS[0]}"
    set -e

    show-warnings

    if [[ ! $PIP_STATUS -eq 0 ]]; then
        exit 1
    fi

    # Smart Requirements handling
    cp $DJANGO_PROJ/requirements.txt .heroku/python/requirements-declared.txt
    /app/.heroku/python/bin/pip freeze --disable-pip-version-check > .heroku/python/requirements-installed.txt

    echo
    
    # Install test dependencies, for CI. 
    if [ "$INSTALL_TEST" ]; then
        if [[ -f "$1/requirements-test.txt" ]]; then
            puts-step "Installing test dependenciesâ€¦"
            /app/.heroku/python/bin/pip install -r "$1/requirements-test.txt" --exists-action=w --src=./.heroku/src --disable-pip-version-check --no-cache-dir 2>&1 | cleanup | indent
        fi
    fi
fi
